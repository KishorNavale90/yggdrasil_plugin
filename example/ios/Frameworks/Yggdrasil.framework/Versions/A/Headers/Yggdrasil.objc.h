// Objective-C API for talking to github.com/yggdrasil-network/yggdrasil-go/src/yggdrasil Go package.
//   gobind -lang=objc github.com/yggdrasil-network/yggdrasil-go/src/yggdrasil
//
// File is generated by gobind. Do not edit.

#ifndef __Yggdrasil_H__
#define __Yggdrasil_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Config.objc.h"

@class YggdrasilConn;
@class YggdrasilConnError;
@class YggdrasilCore;
@class YggdrasilDHTEntry;
@class YggdrasilDHTRes;
@class YggdrasilDialer;
@class YggdrasilFlowKeyMessage;
@class YggdrasilListener;
@class YggdrasilPeer;
@class YggdrasilSession;
@class YggdrasilSwitchPeer;
@class YggdrasilSwitchQueue;
@class YggdrasilSwitchQueues;
@class YggdrasilTcpListener;
@class YggdrasilTcpUpgrade;

/**
 * The Conn struct is a reference to an active connection session between the
local node and a remote node. Conn implements the io.ReadWriteCloser
interface and is used to send and receive traffic with a remote node.
 */
@interface YggdrasilConn : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Conn.Inbox with unsupported type: github.com/Arceliar/phony.Inbox

// skipped method Conn.Act with unsupported parameter or return types

/**
 * Close will close an open connection and any blocking operations on the
connection will unblock and return. From this point forward, the connection
can no longer be used and you should no longer attempt to Read or Write to
the connection.
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
// skipped method Conn.LocalAddr with unsupported parameter or return types

/**
 * Read allows you to read from the connection in a synchronous fashion. The
function will block up until the point that either new data is available, the
connection has been closed or the read deadline has been reached. If the
function succeeds, the number of bytes read from the connection will be
returned. Otherwise, an error condition will be returned.

Note that you can also implement asynchronous reads by using SetReadCallback.
If you do that, you should no longer attempt to use the Read function.
 */
- (BOOL)read:(NSData* _Nullable)b ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
// skipped method Conn.RemoteAddr with unsupported parameter or return types

// skipped method Conn.SetDeadline with unsupported parameter or return types

// skipped method Conn.SetReadCallback with unsupported parameter or return types

// skipped method Conn.SetReadDeadline with unsupported parameter or return types

// skipped method Conn.SetWriteDeadline with unsupported parameter or return types

/**
 * String returns a string that uniquely identifies a connection. Currently this
takes a form similar to "conn=0x0000000", which contains a memory reference
to the Conn object. While this value should always be unique for each Conn
object, the format of this is not strictly defined and may change in the
future.
 */
- (NSString* _Nonnull)string;
/**
 * Write allows you to write to the connection in a synchronous fashion. This
function may block until either the write has completed, the connection has
been closed or the write deadline has been reached. If the function succeeds,
the number of written bytes is returned. Otherwise, an error condition is
returned.
 */
- (BOOL)write:(NSData* _Nullable)b ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
// skipped method Conn.WriteFrom with unsupported parameter or return types

@end

/**
 * ConnError implements the net.Error interface
 */
@interface YggdrasilConnError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Closed returns if the session is already closed and is now unusable.
 */
- (BOOL)closed;
- (NSString* _Nonnull)error;
/**
 * PacketMaximumSize returns the maximum supported packet size. This will only
return a non-zero value if ConnError.PacketTooBig() returns true.
 */
- (long)packetMaximumSize;
/**
 * PacketTooBig returns in response to sending a packet that is too large, and
if so, the maximum supported packet size that should be used for the
connection.
 */
- (BOOL)packetTooBig;
/**
 * Temporary return true if the error is temporary or false if it is a permanent
error condition.
 */
- (BOOL)temporary;
/**
 * Timeout returns true if the error relates to a timeout condition on the
connection.
 */
- (BOOL)timeout;
@end

/**
 * The Core object represents the Yggdrasil node. You should create a Core
object for each Yggdrasil node you plan to run.
 */
@interface YggdrasilCore : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Core.Inbox with unsupported type: github.com/Arceliar/phony.Inbox

// skipped method Core.Act with unsupported parameter or return types

- (BOOL)addAllowedEncryptionPublicKey:(NSString* _Nullable)bstr error:(NSError* _Nullable* _Nullable)error;
- (BOOL)addPeer:(NSString* _Nullable)addr sintf:(NSString* _Nullable)sintf error:(NSError* _Nullable* _Nullable)error;
// skipped method Core.Address with unsupported parameter or return types

- (BOOL)callPeer:(NSString* _Nullable)addr sintf:(NSString* _Nullable)sintf error:(NSError* _Nullable* _Nullable)error;
- (YggdrasilDialer* _Nullable)connDialer:(NSError* _Nullable* _Nullable)error;
- (YggdrasilListener* _Nullable)connListen:(NSError* _Nullable* _Nullable)error;
// skipped method Core.Coords with unsupported parameter or return types

// skipped method Core.DHTPing with unsupported parameter or return types

// skipped method Core.DisconnectPeer with unsupported parameter or return types

- (NSString* _Nonnull)encryptionPublicKey;
// skipped method Core.GetAllowedEncryptionPublicKeys with unsupported parameter or return types

// skipped method Core.GetDHT with unsupported parameter or return types

// skipped method Core.GetMaximumSessionMTU with unsupported parameter or return types

// skipped method Core.GetNodeInfo with unsupported parameter or return types

// skipped method Core.GetPeers with unsupported parameter or return types

// skipped method Core.GetSessions with unsupported parameter or return types

// skipped method Core.GetSwitchPeers with unsupported parameter or return types

// skipped method Core.GetSwitchQueues with unsupported parameter or return types

- (YggdrasilTcpListener* _Nullable)listenTCP:(NSString* _Nullable)uri error:(NSError* _Nullable* _Nullable)error;
- (YggdrasilTcpListener* _Nullable)listenTLS:(NSString* _Nullable)uri error:(NSError* _Nullable* _Nullable)error;
// skipped method Core.MyNodeInfo with unsupported parameter or return types

// skipped method Core.NodeID with unsupported parameter or return types

- (BOOL)removeAllowedEncryptionPublicKey:(NSString* _Nullable)bstr error:(NSError* _Nullable* _Nullable)error;
- (BOOL)removePeer:(NSString* _Nullable)addr sintf:(NSString* _Nullable)sintf error:(NSError* _Nullable* _Nullable)error;
// skipped method Core.SetLogger with unsupported parameter or return types

// skipped method Core.SetMaximumSessionMTU with unsupported parameter or return types

// skipped method Core.SetNodeInfo with unsupported parameter or return types

// skipped method Core.SetSessionGatekeeper with unsupported parameter or return types

- (NSString* _Nonnull)signingPublicKey;
// skipped method Core.Start with unsupported parameter or return types

/**
 * Stop shuts down the Yggdrasil node.
 */
- (void)stop;
// skipped method Core.Subnet with unsupported parameter or return types

// skipped method Core.TreeID with unsupported parameter or return types

/**
 * UpdateConfig updates the configuration in Core with the provided
config.NodeConfig and then signals the various module goroutines to
reconfigure themselves if needed.
 */
- (void)updateConfig:(ConfigNodeConfig* _Nullable)config;
@end

/**
 * DHTEntry represents a single DHT entry that has been learned or cached from
DHT searches.
 */
@interface YggdrasilDHTEntry : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field DHTEntry.PublicKey with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/crypto.BoxPubKey

// skipped field DHTEntry.Coords with unsupported type: []uint64

// skipped field DHTEntry.LastSeen with unsupported type: time.Duration

@end

/**
 * DHTRes represents a DHT response, as returned by DHTPing.
 */
@interface YggdrasilDHTRes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field DHTRes.PublicKey with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/crypto.BoxPubKey

// skipped field DHTRes.Coords with unsupported type: []uint64

// skipped field DHTRes.Dest with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/crypto.NodeID

// skipped field DHTRes.Infos with unsupported type: []github.com/yggdrasil-network/yggdrasil-go/src/yggdrasil.DHTEntry

@end

/**
 * Dialer represents an Yggdrasil connection dialer.
 */
@interface YggdrasilDialer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method Dialer.Dial with unsupported parameter or return types

// skipped method Dialer.DialByNodeIDandMask with unsupported parameter or return types

// skipped method Dialer.DialByPublicKey with unsupported parameter or return types

// skipped method Dialer.DialContext with unsupported parameter or return types

@end

@interface YggdrasilFlowKeyMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field FlowKeyMessage.FlowKey with unsupported type: uint64

@property (nonatomic) NSData* _Nullable message;
@end

/**
 * Listener waits for incoming sessions
 */
@interface YggdrasilListener : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method Listener.Accept with unsupported parameter or return types

// skipped method Listener.Addr with unsupported parameter or return types

/**
 * Close will stop the listener
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Peer represents a single peer object. This contains information from the
preferred switch port for this peer, although there may be more than one
active switch port connection to the peer in reality.

This struct is informational only - you cannot manipulate peer connections
using instances of this struct. You should use the AddPeer or RemovePeer
functions instead.
 */
@interface YggdrasilPeer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Peer.PublicKey with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/crypto.BoxPubKey

@property (nonatomic) NSString* _Nonnull endpoint;
// skipped field Peer.BytesSent with unsupported type: uint64

// skipped field Peer.BytesRecvd with unsupported type: uint64

@property (nonatomic) NSString* _Nonnull protocol;
// skipped field Peer.Port with unsupported type: uint64

// skipped field Peer.Uptime with unsupported type: time.Duration

@end

/**
 * Session represents an open session with another node. Sessions are opened in
response to traffic being exchanged between two nodes using Conn objects.
Note that sessions will automatically be closed by Yggdrasil if no traffic is
exchanged for around two minutes.
 */
@interface YggdrasilSession : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Session.PublicKey with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/crypto.BoxPubKey

// skipped field Session.Coords with unsupported type: []uint64

// skipped field Session.BytesSent with unsupported type: uint64

// skipped field Session.BytesRecvd with unsupported type: uint64

// skipped field Session.MTU with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/types.MTU

// skipped field Session.Uptime with unsupported type: time.Duration

@property (nonatomic) BOOL wasMTUFixed;
@end

/**
 * SwitchPeer represents a switch connection to a peer. Note that there may be
multiple switch peers per actual peer, e.g. if there are multiple connections
to a given node.

This struct is informational only - you cannot manipulate switch peer
connections using instances of this struct. You should use the AddPeer or
RemovePeer functions instead.
 */
@interface YggdrasilSwitchPeer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field SwitchPeer.PublicKey with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/crypto.BoxPubKey

// skipped field SwitchPeer.Coords with unsupported type: []uint64

// skipped field SwitchPeer.BytesSent with unsupported type: uint64

// skipped field SwitchPeer.BytesRecvd with unsupported type: uint64

// skipped field SwitchPeer.Port with unsupported type: uint64

@property (nonatomic) NSString* _Nonnull protocol;
@property (nonatomic) NSString* _Nonnull endpoint;
@end

/**
 * SwitchQueue represents a single switch queue. Switch queues are only created
in response to congestion on a given link and represent how much data has
been temporarily cached for sending once the congestion has cleared.
 */
@interface YggdrasilSwitchQueue : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
// skipped field SwitchQueue.Size with unsupported type: uint64

// skipped field SwitchQueue.Packets with unsupported type: uint64

// skipped field SwitchQueue.Port with unsupported type: uint64

@end

/**
 * SwitchQueues represents information from the switch related to link
congestion and a list of switch queues created in response to congestion on a
given link.
 */
@interface YggdrasilSwitchQueues : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field SwitchQueues.Queues with unsupported type: []github.com/yggdrasil-network/yggdrasil-go/src/yggdrasil.SwitchQueue

// skipped field SwitchQueues.Count with unsupported type: uint64

// skipped field SwitchQueues.Size with unsupported type: uint64

// skipped field SwitchQueues.HighestCount with unsupported type: uint64

// skipped field SwitchQueues.HighestSize with unsupported type: uint64

// skipped field SwitchQueues.MaximumSize with unsupported type: uint64

@end

/**
 * TcpListener is a stoppable TCP listener interface. These are typically
returned from calls to the ListenTCP() function and are also used internally
to represent listeners created by the "Listen" configuration option and for
multicast interfaces.
 */
@interface YggdrasilTcpListener : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field TcpListener.Listener with unsupported type: net.Listener

- (void)stop;
@end

@interface YggdrasilTcpUpgrade : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

/**
 * Minimum allowed total size of switch queues.
 */
FOUNDATION_EXPORT const int64_t YggdrasilSwitchQueueTotalMinSize;

#endif
